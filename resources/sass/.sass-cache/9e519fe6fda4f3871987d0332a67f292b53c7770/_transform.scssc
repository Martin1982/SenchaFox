3.2.0.alpha.11 (Bleeding Edge)
1faeeb68ccdcb0b2c4cbe63133e1285a536c5067
o:Sass::Tree::RootNode
:@template"öH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari is the only browser that currently supports 3D transforms.
// Because of that it can be important to control whether a given 2D transform
// uses the full range of experimental browser prefixes, or only the 3D list.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Official **(Only Safari Supports 3D perspective)**

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@children[io:Sass::Tree::ImportNode
;0;[ :@options{ :
@linei:@imported_filename"sharedo:Sass::Tree::CommentNode;[ :@lines[ ;	@
:
@loud0:@value"/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari is the only browser that currently supports 3D transforms.
 * Because of that it can be important to control whether a given 2D transform
 * uses the full range of experimental browser prefixes, or only the 3D list.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Official **(Only Safari Supports 3D perspective)** */;
i:@silenti o;;[ ;[ ;	@
;0;"¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;
i;i o;;[ ;[ ;	@
;0;"Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;
i;i o;;[ ;[ ;	@
;0;"p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;
i ;i o;;[ ;[ ;	@
;0;"a/* Defaults ------------------------------------------------------------------
 * @doc on */;
i4;i o;;[ ;[ ;	@
;0;"./* The default x-origin for transforms */;
i7;i o:Sass::Tree::VariableNode;[ :
@expro:Sass::Script::Number:@original"50%;	@
:@denominator_units[ ;i7;
i8:@numerator_units["%:
@name"default-origin-x;	@
;
i8:@guarded"!defaulto;;[ ;[ ;	@
;0;"./* The default y-origin for transforms */;
i9;i o;;[ ;o;;"50%;	@
;[ ;i7;
i:;["%;"default-origin-y;	@
;
i:;"!defaulto;;[ ;[ ;	@
;0;"./* The default z-origin for transforms */;
i;;i o;;[ ;o;;"50%;	@
;[ ;i7;
i<;["%;"default-origin-z;	@
;
i<;"!defaulto;;[ ;[ ;	@
;0;"//* The default x-multiplier for scaling */;
i?;i o;;[ ;o;;"	1.25;	@
;[ ;f	1.25;
i@;[ ;"default-scale-x;	@
;
i@;"!defaulto;;[ ;[ ;	@
;0;"//* The default y-multiplier for scaling */;
iA;i o;;[ ;o:Sass::Script::Variable	;"default-scale-x:@underscored_name"default_scale_x;	@
;
iB;"default-scale-y;	@
;
iB;"!defaulto;;[ ;[ ;	@
;0;"//* The default z-multiplier for scaling */;
iC;i o;;[ ;o;	;"default-scale-x;"default_scale_x;	@
;
iD;"default-scale-z;	@
;
iD;"!defaulto;;[ ;[ ;	@
;0;"*/* The default angle for rotations */;
iG;i o;;[ ;o;;"
45deg;	@
;[ ;i2;
iH;["deg;"default-rotate;	@
;
iH;"!defaulto;;[ ;[ ;	@
;0;"</* The default x-vector for the axis of 3d rotations */;
iK;i o;;[ ;o;;"1;	@
;@O;i;
iL;[ ;"default-vector-x;	@
;
iL;"!defaulto;;[ ;[ ;	@
;0;"</* The default y-vector for the axis of 3d rotations */;
iM;i o;;[ ;o;;"1;	@
;@O;i;
iN;[ ;"default-vector-y;	@
;
iN;"!defaulto;;[ ;[ ;	@
;0;"</* The default z-vector for the axis of 3d rotations */;
iO;i o;;[ ;o;;"1;	@
;@O;i;
iP;[ ;"default-vector-z;	@
;
iP;"!defaulto;;[ ;[ ;	@
;0;"0/* The default x-length for translations */;
iS;i o;;[ ;o;;"1em;	@
;[ ;i;
iT;["em;"default-translate-x;	@
;
iT;"!defaulto;;[ ;[ ;	@
;0;"0/* The default y-length for translations */;
iU;i o;;[ ;o;	;"default-translate-x;"default_translate_x;	@
;
iV;"default-translate-y;	@
;
iV;"!defaulto;;[ ;[ ;	@
;0;"0/* The default z-length for translations */;
iW;i o;;[ ;o;	;"default-translate-x;"default_translate_x;	@
;
iX;"default-translate-z;	@
;
iX;"!defaulto;;[ ;[ ;	@
;0;"*/* The default x-angle for skewing */;
i[;i o;;[ ;o;;"	5deg;	@
;[ ;i
;
i\;["deg;"default-skew-x;	@
;
i\;"!defaulto;;[ ;[ ;	@
;0;"*/* The default y-angle for skewing */;
i];i o;;[ ;o;;"	5deg;	@
;[ ;i
;
i^;["deg;"default-skew-y;	@
;
i^;"!defaulto;;[ ;[ ;	@
;0;"/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;
ia;i o:Sass::Tree::MixinDefNode;[o;;[ ;o:Sass::Script::Operation
:@operand1o;	;"only3d;"only3d;	@
;
im;	@
:@operator:or;
im:@operand2o;
;o:Sass::Script::Funcall
;"-compass-list-size;	@
:@keywords{ ;
im:
@args[o;!
;"-compass-list;	@
;"{ ;
im;#[o;	;"origin;"origin;	@
;
im;	@
;:gt;
im; o;;"2;	@
;@O;i;
im;[ ;"only3d;	@
;
im;0u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:@underscored_name"only3d:@options{ :
@lineinu:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:@children[ :
@name"experimental:@options{ :@keywords{ :
@lineiu:
@args[o:Sass::Script::String	:
@type:identifier;@
:@value"transform-origin;
iso:Sass::Script::Variable	;"origin:@underscored_name"origin;@
;
iso;	;;;@
;"	-moz;
ito;	;;;@
;"-webkit;
ito;	;;;@
;"-o;
ito;	;;;@
;"-ms;
ito:!Sass::Script::UnaryOperation	;@
:@operator:not:@operando;	;;;@
;"-khtml;
it;
ito;	;;;@
;"official;
it[o:Sass::Tree::MixinNode:@children[ ;"experimental;@	:@keywords{ ;	iq:
@args[o:Sass::Script::String	:
@type:identifier;@	:@value"transform-origin;	ioo; 	;"origin;"origin;@	;	ioo:!Sass::Script::UnaryOperation	;@	:@operator:not:@operando;	;;;@	;"	-moz;	ip;	ipo;	;;;@	;"-webkit;	ipo;	;@	;;;o;	;;;@	;"-o;	ip;	ipo;	;@	;;;o;	;;;@	;"-ms;	ip;	ipo;	;@	;;;o;	;;;@	;"-khtml;	ip;	ipo;	;;;@	;"official;	ip;"apply-origin;	@
;
il:@has_childrenT;#[[o;;"origin;"origin;	{ 0[o;;"only3d;"only3d;	@ó0o;;[ ;[ ;	@
;0;"#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;
iy;i o;;[o;;[ ;o;!
;"unquote;	@
;"{ ;
i;#[o:Sass::Script::String	:
@type:string;	@
;" ;
i;"origin;	@
;
i;0u;%[o:Sass::Script::Operation
:@operand1o; 
;o:Sass::Script::Variable	:
@name"origin-x:@underscored_name"origin_x:@options{ :
@linei;
@:@operator:or;i:@operand2o;	;"origin-y;	"origin_y;
@;i;
@;;;i;o;	;"origin-z;	"origin_z;
@;i0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:@underscored_name"origin_x:@options{ :
@lineiu:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::Number:@original"50%:@options{ :@denominator_units[ :@valuei7:
@linei:@numerator_units["%:
@name"origin;
@;i:@guarded0[o:Sass::Tree::VariableNode:@children[ :
@expro; 	;"origin-x;"origin_x;@	;	i;"origin;@	;	i:@guarded0u;Þ[o:Sass::Script::Variable	:
@name"origin-y:@underscored_name"origin_y:@options{ :
@lineiu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:@underscored_name"origin_z:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"origin;"origin;@	;	io:Sass::Script::Number:@original"50%;@	:@denominator_units[ ;i7;	i:@numerator_units["%;	i:@separator:
space;"origin;@	;	i:@guarded0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"origin;"origin;@	;	io; 	;"origin-y;"origin_y;@	;	i;	i:@separator:
space;"origin;@	;	i:@guarded0u;5[o:Sass::Script::Variable	:
@name"origin-z:@underscored_name"origin_z:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"origin;"origin;@	;	io; 	;"origin-z;"origin_z;@	;	i;	i:@separator:
space;"origin;@	;	i:@guarded0o:Sass::Tree::MixinNode:@children[ ;"apply-origin;
@:@keywords{ ;i:
@args[o;	;"origin;	"origin;
@;io;	;"only3d;	"only3d;
@;i;"transform-origin;	@
;
i;&T;#[	[o;;"origin-x;"origin_x;	{ o;	;"default-origin-x;"default_origin_x;	@;
i|[o;;"origin-y;"origin_y;	@o;	;"default-origin-y;"default_origin_y;	@;
i}[o;;"origin-z;"origin_z;	@o:Sass::Script::Bool;	@;F;
i~[o;;"only3d;"only3d;	@o;!
;"if;	@;"{ ;
i;#[o;	;"origin-z;"origin_z;	@;
io;*;	@;T;
io;*;	@;F;
io;;[ ;[ ;	@
;0;"¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;
i;i o;;[u;%6[o:Sass::Script::Variable	:
@name"only3d:@underscored_name"only3d:@options{ :
@lineiu:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:@children[ :
@name"experimental:@options{ :@keywords{ :
@linei:
@args[o:Sass::Script::String	:
@type:identifier;@
:@value"transform;
io:Sass::Script::Variable	;"transform:@underscored_name"transform;@
;
io;	;;;@
;"	-moz;
io;	;;;@
;"-webkit;
io;	;;;@
;"-o;
io;	;;;@
;"-ms;
io:!Sass::Script::UnaryOperation	;@
:@operator:not:@operando;	;;;@
;"-khtml;
i;
io;	;;;@
;"official;
i[o:Sass::Tree::MixinNode:@children[ ;"experimental;@	:@keywords{ ;	i:
@args[o:Sass::Script::String	:
@type:identifier;@	:@value"transform;	io; 	;"transform;"transform;@	;	io:!Sass::Script::UnaryOperation	;@	:@operator:not:@operando;	;;;@	;"	-moz;	i;	io;	;;;@	;"-webkit;	io;	;@	;;;o;	;;;@	;"-o;	i;	io;	;@	;;;o;	;;;@	;"-ms;	i;	io;	;@	;;;o;	;;;@	;"-khtml;	i;	io;	;;;@	;"official;	i;"transform;	@
;
i;&T;#[[o;;"transform;"transform;	{ 0[o;;"only3d;"only3d;	@8o;*;	@8;F;
io;;[ ;[ ;	@
;0;"D/* Shortcut to target all browsers with 2D transform support */;
i;i o;;[o:Sass::Tree::MixinNode;[ ;"transform;	@
;"{ ;
i¡;#[o;	;"
trans;"
trans;	@
;
i¡o;*;	@
;F;
i¡;"transform2d;	@
;
i ;&T;#[[o;;"
trans;"
trans;	{ 0o;;[ ;[ ;	@
;0;"E/* Shortcut to target only browsers with 3D transform support */;
i¤;i o;;[o;+;[ ;"transform;	@
;"{ ;
i¦;#[o;	;"
trans;"
trans;	@
;
i¦o;*;	@
;T;
i¦;"transform3d;	@
;
i¥;&T;#[[o;;"
trans;"
trans;	{ 0o;;[ ;[ ;	@
;0;"m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;
i©;i o;;[ ;[ ;	@
;0;"`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;
i­;i o;;[o;+;[ ;"experimental;	@
;"{ ;
i·;#[o;'	;(:identifier;	@
;"perspective;
iµo;	;"p;"p;	@
;
iµo:!Sass::Script::UnaryOperation	;	@
;:not:@operando;'	;(;,;	@
;"	-moz;
i¶;
i¶o;'	;(;,;	@
;"-webkit;
i¶o;-	;	@
;;.;/o;'	;(;,;	@
;"-o;
i¶;
i¶o;-	;	@
;;.;/o;'	;(;,;	@
;"-ms;
i¶;
i¶o;-	;	@
;;.;/o;'	;(;,;	@
;"-khtml;
i¶;
i¶o;'	;(;,;	@
;"official;
i¶;"perspective;	@
;
i´;&T;#[[o;;"p;"p;	{ 0o;;[ ;[ ;	@
;0;"¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;
iº;i o;;[o;+;[ ;"experimental;	@
;"{ ;
iÂ;#[o;'	;(;,;	@
;"perspective-origin;
iÀo;	;"origin;"origin;	@
;
iÀo;-	;	@
;;.;/o;'	;(;,;	@
;"	-moz;
iÁ;
iÁo;'	;(;,;	@
;"-webkit;
iÁo;-	;	@
;;.;/o;'	;(;,;	@
;"-o;
iÁ;
iÁo;-	;	@
;;.;/o;'	;(;,;	@
;"-ms;
iÁ;
iÁo;-	;	@
;;.;/o;'	;(;,;	@
;"-khtml;
iÁ;
iÁo;'	;(;,;	@
;"official;
iÁ;"perspective-origin;	@
;
i¿;&T;#[[o;;"origin;"origin;	{ o;;"50%;	@»;[ ;i7;
i¿;["%o;;[ ;[ ;	@
;0;"÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;
iÅ;i o;;[o;+;[ ;"experimental;	@
;"{ ;
iÎ;#[o;'	;(;,;	@
;"transform-style;
iÌo;	;"
style;"
style;	@
;
iÌo;-	;	@
;;.;/o;'	;(;,;	@
;"	-moz;
iÍ;
iÍo;'	;(;,;	@
;"-webkit;
iÍo;-	;	@
;;.;/o;'	;(;,;	@
;"-o;
iÍ;
iÍo;-	;	@
;;.;/o;'	;(;,;	@
;"-ms;
iÍ;
iÍo;-	;	@
;;.;/o;'	;(;,;	@
;"-khtml;
iÍ;
iÍo;'	;(;,;	@
;"official;
iÍ;"transform-style;	@
;
iË;&T;#[[o;;"
style;"
style;	{ o;'	;(;,;	@ç;"preserve-3d;
iËo;;[ ;[ ;	@
;0;"ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;
iÑ;i o;;[o;+;[ ;"experimental;	@
;"{ ;
iÚ;#[o;'	;(;,;	@
;"backface-visibility;
iØo;	;"visibility;"visibility;	@
;
iØo;-	;	@
;;.;/o;'	;(;,;	@
;"	-moz;
iÙ;
iÙo;'	;(;,;	@
;"-webkit;
iÙo;-	;	@
;;.;/o;'	;(;,;	@
;"-o;
iÙ;
iÙo;-	;	@
;;.;/o;'	;(;,;	@
;"-ms;
iÙ;
iÙo;-	;	@
;;.;/o;'	;(;,;	@
;"-khtml;
iÙ;
iÙo;'	;(;,;	@
;"official;
iÙ;"backface-visibility;	@
;
i×;&T;#[[o;;"visibility;"visibility;	{ o;'	;(;,;	@;"hidden;
i×o;;[ ;[ ;	@
;0;"S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;
iÝ;i o;;[ ;[ ;	@
;0;"a/* Scale ---------------------------------------------------------------------
 * @doc on */;
iä;i o;;[ ;[ ;	@
;0;"¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iç;i o;;[o;;[ ;o;!
;"
scale;	@
;"{ ;
iö;#[o;	;"scale-x;"scale_x;	@
;
iöo;	;"scale-y;"scale_y;	@
;
iö;"
trans;	@
;
iö;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei÷0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i÷:
@args[o; 	;"perspective;"perspective;@	;	i÷o; 	;"
trans;"
trans;@	;	i÷;	i÷:@separator:
space;"
trans;@	;	i÷:@guarded0o;+;[ ;"transform;	@
;"{ ;
iø;#[o;	;"
trans;"
trans;	@
;
iøo;	;"only3d;"only3d;	@
;
iø;"
scale;	@
;
iõ;&T;#[	[o;;"scale-x;"scale_x;	{ o;	;"default-scale-x;"default_scale_x;	@@;
iñ[o;;"scale-y;"scale_y;	@@o;	;"scale-x;"scale_x;	@@;
iò[o;;"perspective;"perspective;	@@o;*;	@@;F;
ió[o;;"only3d;"only3d;	@@o;*;	@@;F;
iôo;;[ ;[ ;	@
;0;"¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iû;i o;;[o;;[ ;o;!
;"scaleX;	@
;"{ ;
i;#[o;	;"
scale;"
scale;	@
;
i;"
trans;	@
;
i;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0o;+;[ ;"transform;	@
;"{ ;
i;#[o;	;"
trans;"
trans;	@
;
io;	;"only3d;"only3d;	@
;
i;"scaleX;	@
;
i;&T;#[[o;;"
scale;"
scale;	{ o;	;"default-scale-x;"default_scale_x;	@w;
i [o;;"perspective;"perspective;	@wo;*;	@w;F;
i[o;;"only3d;"only3d;	@wo;*;	@w;F;
io;;[ ;[ ;	@
;0;"¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i	;i o;;[o;;[ ;o;!
;"scaleY;	@
;"{ ;
i;#[o;	;"
scale;"
scale;	@
;
i;"
trans;	@
;
i;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0o;+;[ ;"transform;	@
;"{ ;
i;#[o;	;"
trans;"
trans;	@
;
io;	;"only3d;"only3d;	@
;
i;"scaleY;	@
;
i;&T;#[[o;;"
scale;"
scale;	{ o;	;"default-scale-y;"default_scale_y;	@§;
i[o;;"perspective;"perspective;	@§o;*;	@§;F;
i[o;;"only3d;"only3d;	@§o;*;	@§;F;
io;;[ ;[ ;	@
;0;"/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i;i o;;[o;;[ ;o;!
;"scaleZ;	@
;"{ ;
i;#[o;	;"
scale;"
scale;	@
;
i;"
trans;	@
;
i;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei 0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i :
@args[o; 	;"perspective;"perspective;@	;	i o; 	;"
trans;"
trans;@	;	i ;	i :@separator:
space;"
trans;@	;	i :@guarded0o;+;[ ;"transform3d;	@
;"{ ;
i!;#[o;	;"
trans;"
trans;	@
;
i!;"scaleZ;	@
;
i;&T;#[[o;;"
scale;"
scale;	{ o;	;"default-scale-z;"default_scale_z;	@Ô;
i[o;;"perspective;"perspective;	@Ôo;*;	@Ô;F;
io;;[ ;[ ;	@
;0;"·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i$;i o;;[o;;[ ;o;!
;"scale3d;	@
;"{ ;
i.;#[o;	;"scale-x;"scale_x;	@
;
i.o;	;"scale-y;"scale_y;	@
;
i.o;	;"scale-z;"scale_z;	@
;
i.;"
trans;	@
;
i.;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei/0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i/:
@args[o; 	;"perspective;"perspective;@	;	i/o; 	;"
trans;"
trans;@	;	i/;	i/:@separator:
space;"
trans;@	;	i/:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
i0;#[o;	;"
trans;"
trans;	@
;
i0;"scale3d;	@
;
i-;&T;#[	[o;;"scale-x;"scale_x;	{ o;	;"default-scale-x;"default_scale_x;	@;
i)[o;;"scale-y;"scale_y;	@o;	;"default-scale-y;"default_scale_y;	@;
i*[o;;"scale-z;"scale_z;	@o;	;"default-scale-z;"default_scale_z;	@;
i+[o;;"perspective;"perspective;	@o;*;	@;F;
i,o;;[ ;[ ;	@
;0;"m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;
i3;i o;;[ ;[ ;	@
;0;"ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i7;i o;;[o;;[ ;o;!
;"rotate;	@
;"{ ;
iA;#[o;	;"rotate;"rotate;	@
;
iA;"
trans;	@
;
iA;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineiB0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	iB:
@args[o; 	;"perspective;"perspective;@	;	iBo; 	;"
trans;"
trans;@	;	iB;	iB:@separator:
space;"
trans;@	;	iB:@guarded0o;+;[ ;"transform;	@
;"{ ;
iC;#[o;	;"
trans;"
trans;	@
;
iCo;	;"only3d;"only3d;	@
;
iC;"rotate;	@
;
i@;&T;#[[o;;"rotate;"rotate;	{ o;	;"default-rotate;"default_rotate;	@?;
i=[o;;"perspective;"perspective;	@?o;*;	@?;F;
i>[o;;"only3d;"only3d;	@?o;*;	@?;F;
i?o;;[ ;[ ;	@
;0;"/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iF;i o;;[o;+;[ ;"rotate;	@
;"{ ;
iN;#[o;	;"rotate;"rotate;	@
;
iNo;	;"perspective;"perspective;	@
;
iNo;	;"only3d;"only3d;	@
;
iN;"rotateZ;	@
;
iM;&T;#[[o;;"rotate;"rotate;	{ o;	;"default-rotate;"default_rotate;	@g;
iJ[o;;"perspective;"perspective;	@go;*;	@g;F;
iK[o;;"only3d;"only3d;	@go;*;	@g;F;
iLo;;[ ;[ ;	@
;0;"¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iQ;i o;;[o;;[ ;o;!
;"rotateX;	@
;"{ ;
iY;#[o;	;"rotate;"rotate;	@
;
iY;"
trans;	@
;
iY;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineiZ0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	iZ:
@args[o; 	;"perspective;"perspective;@	;	iZo; 	;"
trans;"
trans;@	;	iZ;	iZ:@separator:
space;"
trans;@	;	iZ:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
i[;#[o;	;"
trans;"
trans;	@
;
i[;"rotateX;	@
;
iX;&T;#[[o;;"rotate;"rotate;	{ o;	;"default-rotate;"default_rotate;	@;
iV[o;;"perspective;"perspective;	@o;*;	@;F;
iWo;;[ ;[ ;	@
;0;"§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i^;i o;;[o;;[ ;o;!
;"rotateY;	@
;"{ ;
if;#[o;	;"rotate;"rotate;	@
;
if;"
trans;	@
;
if;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineig0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	ig:
@args[o; 	;"perspective;"perspective;@	;	igo; 	;"
trans;"
trans;@	;	ig;	ig:@separator:
space;"
trans;@	;	ig:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
ih;#[o;	;"
trans;"
trans;	@
;
ih;"rotateY;	@
;
ie;&T;#[[o;;"rotate;"rotate;	{ o;	;"default-rotate;"default_rotate;	@¼;
ic[o;;"perspective;"perspective;	@¼o;*;	@¼;F;
ido;;[ ;[ ;	@
;0;"¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
ik;i o;;[o;;[ ;o;!
;"rotate3d;	@
;"{ ;
iy;#[	o;	;"vector-x;"vector_x;	@
;
iyo;	;"vector-y;"vector_y;	@
;
iyo;	;"vector-z;"vector_z;	@
;
iyo;	;"rotate;"rotate;	@
;
iy;"
trans;	@
;
iy;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineiz0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	iz:
@args[o; 	;"perspective;"perspective;@	;	izo; 	;"
trans;"
trans;@	;	iz;	iz:@separator:
space;"
trans;@	;	iz:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
i{;#[o;	;"
trans;"
trans;	@
;
i{;"rotate3d;	@
;
ix;&T;#[
[o;;"vector-x;"vector_x;	{ o;	;"default-vector-x;"default_vector_x;	@í;
is[o;;"vector-y;"vector_y;	@ío;	;"default-vector-y;"default_vector_y;	@í;
it[o;;"vector-z;"vector_z;	@ío;	;"default-vector-z;"default_vector_z;	@í;
iu[o;;"rotate;"rotate;	@ío;	;"default-rotate;"default_rotate;	@í;
iv[o;;"perspective;"perspective;	@ío;*;	@í;F;
iwo;;[ ;[ ;	@
;0;"m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;
i~;i o;;[ ;[ ;	@
;0;"5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i;i o;;[o;;[ ;o;!
;"translate;	@
;"{ ;
i;#[o;	;"translate-x;"translate_x;	@
;
io;	;"translate-y;"translate_y;	@
;
i;"
trans;	@
;
i;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0o;+;[ ;"transform;	@
;"{ ;
i;#[o;	;"
trans;"
trans;	@
;
io;	;"only3d;"only3d;	@
;
i;"translate;	@
;
i;&T;#[	[o;;"translate-x;"translate_x;	{ o;	;"default-translate-x;"default_translate_x;	@4;
i[o;;"translate-y;"translate_y;	@4o;	;"default-translate-y;"default_translate_y;	@4;
i[o;;"perspective;"perspective;	@4o;*;	@4;F;
i[o;;"only3d;"only3d;	@4o;*;	@4;F;
io;;[ ;[ ;	@
;0;"³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i;i o;;[o;;[ ;o;!
;"translateX;	@
;"{ ;
i;#[o;	;"trans-x;"trans_x;	@
;
i;"
trans;	@
;
i;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i:
@args[o; 	;"perspective;"perspective;@	;	io; 	;"
trans;"
trans;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0o;+;[ ;"transform;	@
;"{ ;
i;#[o;	;"
trans;"
trans;	@
;
io;	;"only3d;"only3d;	@
;
i;"translateX;	@
;
i;&T;#[[o;;"trans-x;"trans_x;	{ o;	;"default-translate-x;"default_translate_x;	@k;
i[o;;"perspective;"perspective;	@ko;*;	@k;F;
i[o;;"only3d;"only3d;	@ko;*;	@k;F;
io;;[ ;[ ;	@
;0;"³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i ;i o;;[o;;[ ;o;!
;"translateY;	@
;"{ ;
i©;#[o;	;"trans-y;"trans_y;	@
;
i©;"
trans;	@
;
i©;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineiª0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	iª:
@args[o; 	;"perspective;"perspective;@	;	iªo; 	;"
trans;"
trans;@	;	iª;	iª:@separator:
space;"
trans;@	;	iª:@guarded0o;+;[ ;"transform;	@
;"{ ;
i«;#[o;	;"
trans;"
trans;	@
;
i«o;	;"only3d;"only3d;	@
;
i«;"translateY;	@
;
i¨;&T;#[[o;;"trans-y;"trans_y;	{ o;	;"default-translate-y;"default_translate_y;	@;
i¥[o;;"perspective;"perspective;	@o;*;	@;F;
i¦[o;;"only3d;"only3d;	@o;*;	@;F;
i§o;;[ ;[ ;	@
;0;"ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i®;i o;;[o;;[ ;o;!
;"translateZ;	@
;"{ ;
i¶;#[o;	;"trans-z;"trans_z;	@
;
i¶;"
trans;	@
;
i¶;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei·0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i·:
@args[o; 	;"perspective;"perspective;@	;	i·o; 	;"
trans;"
trans;@	;	i·;	i·:@separator:
space;"
trans;@	;	i·:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
i¸;#[o;	;"
trans;"
trans;	@
;
i¸;"translateZ;	@
;
iµ;&T;#[[o;;"trans-z;"trans_z;	{ o;	;"default-translate-z;"default_translate_z;	@È;
i³[o;;"perspective;"perspective;	@Èo;*;	@È;F;
i´o;;[ ;[ ;	@
;0;"Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
i»;i o;;[o;;[ ;o;!
;"translate3d;	@
;"{ ;
iÅ;#[o;	;"translate-x;"translate_x;	@
;
iÅo;	;"translate-y;"translate_y;	@
;
iÅo;	;"translate-z;"translate_z;	@
;
iÅ;"
trans;	@
;
iÅ;0u;%[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@lineiÆ0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	iÆ:
@args[o; 	;"perspective;"perspective;@	;	iÆo; 	;"
trans;"
trans;@	;	iÆ;	iÆ:@separator:
space;"
trans;@	;	iÆ:@guarded0o;+;[ ;"transform3d;	@
;"{ ;
iÇ;#[o;	;"
trans;"
trans;	@
;
iÇ;"translate3d;	@
;
iÄ;&T;#[	[o;;"translate-x;"translate_x;	{ o;	;"default-translate-x;"default_translate_x;	@ö;
iÀ[o;;"translate-y;"translate_y;	@öo;	;"default-translate-y;"default_translate_y;	@ö;
iÁ[o;;"translate-z;"translate_z;	@öo;	;"default-translate-z;"default_translate_z;	@ö;
iÂ[o;;"perspective;"perspective;	@öo;*;	@ö;F;
iÃo;;[ ;[ ;	@
;0;"m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;
iÊ;i o;;[ ;[ ;	@
;0;"ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iÎ;i o;;[o;;[ ;o;!
;"	skew;	@
;"{ ;
iÚ;#[o;	;"skew-x;"skew_x;	@
;
iÚo;	;"skew-y;"skew_y;	@
;
iÚ;"
trans;	@
;
iÚ;0o;+;[ ;"transform;	@
;"{ ;
iÛ;#[o;	;"
trans;"
trans;	@
;
iÛo;	;"only3d;"only3d;	@
;
iÛ;"	skew;	@
;
iÙ;&T;#[[o;;"skew-x;"skew_x;	{ o;	;"default-skew-x;"default_skew_x;	@5;
iÖ[o;;"skew-y;"skew_y;	@5o;	;"default-skew-y;"default_skew_y;	@5;
i×[o;;"only3d;"only3d;	@5o;*;	@5;F;
iØo;;[ ;[ ;	@
;0;"/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iÞ;i o;;[o;;[ ;o;!
;"
skewX;	@
;"{ ;
iç;#[o;	;"skew-x;"skew_x;	@
;
iç;"
trans;	@
;
iç;0o;+;[ ;"transform;	@
;"{ ;
iè;#[o;	;"
trans;"
trans;	@
;
ièo;	;"only3d;"only3d;	@
;
iè;"
skewX;	@
;
iæ;&T;#[[o;;"skew-x;"skew_x;	{ o;	;"default-skew-x;"default_skew_x;	@f;
iä[o;;"only3d;"only3d;	@fo;*;	@f;F;
iåo;;[ ;[ ;	@
;0;"/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
ië;i o;;[o;;[ ;o;!
;"
skewY;	@
;"{ ;
iô;#[o;	;"skew-y;"skew_y;	@
;
iô;"
trans;	@
;
iô;0o;+;[ ;"transform;	@
;"{ ;
iõ;#[o;	;"
trans;"
trans;	@
;
iõo;	;"only3d;"only3d;	@
;
iõ;"
skewY;	@
;
ió;&T;#[[o;;"skew-y;"skew_y;	{ o;	;"default-skew-y;"default_skew_y;	@;
iñ[o;;"only3d;"only3d;	@o;*;	@;F;
iòo;;[ ;[ ;	@
;0;"/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;
iù;i o;;[o;;[ ;o;!
;"unquote;	@
;"{ ;
i;#[o;'	;(;);	@
;" ;
i;"
trans;	@
;
i;0o;;[ ;[ ;	@
;0;"/* perspective */;
i;i u;%.[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::Funcall
;"perspective;@	:@keywords{ ;	i:
@args[o; 	;"perspective;"perspective;@	;	i;"
trans;@	;	i:@guarded0o;;[ ;[ ;	@
;0;"/* scale */;
i;i u;%Ê[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"scale-x:@underscored_name"scale_x:@options{ :
@linei;
@
:@operator:and;i:@operand2o;	;"scale-y;	"scale_y;
@
;iu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:@underscored_name"scale_x:@options{ :
@linei0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	io:Sass::Script::Funcall
;"scaleX;@	:@keywords{ ;	i:
@args[o; 	;"scale-x;"scale_x;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0u; v[o:Sass::Script::Variable	:
@name"scale-y:@underscored_name"scale_y:@options{ :
@linei 0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i o:Sass::Script::Funcall
;"scaleY;@	:@keywords{ ;	i :
@args[o; 	;"scale-y;"scale_y;@	;	i ;	i :@separator:
space;"
trans;@	;	i :@guarded0u; v[o:Sass::Script::Variable	:
@name"scale-z:@underscored_name"scale_z:@options{ :
@linei!0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i!o:Sass::Script::Funcall
;"scaleZ;@	:@keywords{ ;	i!:
@args[o; 	;"scale-z;"scale_z;@	;	i!;	i!:@separator:
space;"
trans;@	;	i!:@guarded0[u;L[o:Sass::Script::Variable	:
@name"scale-z:@underscored_name"scale_z:@options{ :
@lineiu:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	:@options{ :@value[o:Sass::Script::Variable	:
@name"
trans:@underscored_name"
trans;	{ :
@lineio:Sass::Script::Funcall
;"
scale;	@:@keywords{ ;i:
@args[o;	;"scale-x;"scale_x;	@;io;	;"scale-y;"scale_y;	@;i;i:@separator:
space;"
trans;	@;i:@guarded0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	io:Sass::Script::Funcall
;"scale3d;@	:@keywords{ ;	i:
@args[o; 	;"scale-x;"scale_x;@	;	io; 	;"scale-y;"scale_y;@	;	io; 	;"scale-z;"scale_z;@	;	i;	i:@separator:
space;"
trans;@	;	i:@guarded0o;;[ ;[ ;	@
;0;"/* rotate */;
i$;i u;%{[o:Sass::Script::Variable	:
@name"rotate-x:@underscored_name"rotate_x:@options{ :
@linei%0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i%o:Sass::Script::Funcall
;"rotateX;@	:@keywords{ ;	i%:
@args[o; 	;"rotate-x;"rotate_x;@	;	i%;	i%:@separator:
space;"
trans;@	;	i%:@guarded0u;%{[o:Sass::Script::Variable	:
@name"rotate-y:@underscored_name"rotate_y:@options{ :
@linei&0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i&o:Sass::Script::Funcall
;"rotateY;@	:@keywords{ ;	i&:
@args[o; 	;"rotate-y;"rotate_y;@	;	i&;	i&:@separator:
space;"
trans;@	;	i&:@guarded0u;%{[o:Sass::Script::Variable	:
@name"rotate-z:@underscored_name"rotate_z:@options{ :
@linei'0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i'o:Sass::Script::Funcall
;"rotateZ;@	:@keywords{ ;	i':
@args[o; 	;"rotate-z;"rotate_z;@	;	i';	i':@separator:
space;"
trans;@	;	i':@guarded0u;%|[o:Sass::Script::Variable	:
@name"rotate3d:@underscored_name"rotate3d:@options{ :
@linei(0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i(o:Sass::Script::Funcall
;"rotate3d;@	:@keywords{ ;	i(:
@args[o; 	;"rotate3d;"rotate3d;@	;	i(;	i(:@separator:
space;"
trans;@	;	i(:@guarded0o;;[ ;[ ;	@
;0;"/* translate */;
i*;i u;%Þ[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"trans-x:@underscored_name"trans_x:@options{ :
@linei+;
@
:@operator:and;i+:@operand2o;	;"trans-y;	"trans_y;
@
;i+u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:@underscored_name"trans_x:@options{ :
@linei/0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i/o:Sass::Script::Funcall
;"translateX;@	:@keywords{ ;	i/:
@args[o; 	;"trans-x;"trans_x;@	;	i/;	i/:@separator:
space;"
trans;@	;	i/:@guarded0u; z[o:Sass::Script::Variable	:
@name"trans-y:@underscored_name"trans_y:@options{ :
@linei00[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i0o:Sass::Script::Funcall
;"translateY;@	:@keywords{ ;	i0:
@args[o; 	;"trans-y;"trans_y;@	;	i0;	i0:@separator:
space;"
trans;@	;	i0:@guarded0u; z[o:Sass::Script::Variable	:
@name"trans-z:@underscored_name"trans_z:@options{ :
@linei10[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i1o:Sass::Script::Funcall
;"translateZ;@	:@keywords{ ;	i1:
@args[o; 	;"trans-z;"trans_z;@	;	i1;	i1:@separator:
space;"
trans;@	;	i1:@guarded0[u;T[o:Sass::Script::Variable	:
@name"trans-z:@underscored_name"trans_z:@options{ :
@linei,u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	:@options{ :@value[o:Sass::Script::Variable	:
@name"
trans:@underscored_name"
trans;	{ :
@linei-o:Sass::Script::Funcall
;"translate;	@:@keywords{ ;i-:
@args[o;	;"trans-x;"trans_x;	@;i-o;	;"trans-y;"trans_y;	@;i-;i-:@separator:
space;"
trans;	@;i-:@guarded0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i,o:Sass::Script::Funcall
;"translate3d;@	:@keywords{ ;	i,:
@args[o; 	;"trans-x;"trans_x;@	;	i,o; 	;"trans-y;"trans_y;@	;	i,o; 	;"trans-z;"trans_z;@	;	i,;	i,:@separator:
space;"
trans;@	;	i,:@guarded0o;;[ ;[ ;	@
;0;"/* skew */;
i4;i u;%[o:Sass::Script::Operation
:@operand1o:Sass::Script::Variable	:
@name"skew-x:@underscored_name"skew_x:@options{ :
@linei5;
@
:@operator:and;i5:@operand2o;	;"skew-y;	"skew_y;
@
;i5u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:@underscored_name"skew_x:@options{ :
@linei70[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i7o:Sass::Script::Funcall
;"
skewX;@	:@keywords{ ;	i7:
@args[o; 	;"skew-x;"skew_x;@	;	i7;	i7:@separator:
space;"
trans;@	;	i7:@guarded0u; q[o:Sass::Script::Variable	:
@name"skew-y:@underscored_name"skew_y:@options{ :
@linei80[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;{ :@value[o; 	;"
trans;"
trans;@	;	i8o:Sass::Script::Funcall
;"
skewY;@	:@keywords{ ;	i8:
@args[o; 	;"skew-y;"skew_y;@	;	i8;	i8:@separator:
space;"
trans;@	;	i8:@guarded0[o:Sass::Tree::VariableNode:@children[ :
@expro:Sass::Script::List	;
{ :@value[o;	;"
trans;	"
trans;
@
;i5o:Sass::Script::Funcall
;"	skew;
@
:@keywords{ ;i5:
@args[o;	;"skew-x;	"skew_x;
@
;i5o;	;"skew-y;	"skew_y;
@
;i5;i5:@separator:
space;"
trans;
@
;i5:@guarded0o;;[ ;[ ;	@
;0;"/* apply it! */;
i;;i o;+;[ ;"transform;	@
;"{ ;
i<;#[o;	;"
trans;"
trans;	@
;
i<o;	;"only3d;"only3d;	@
;
i<o;+;[ ;"transform-origin;	@
;"{ ;
i=;#[	o;	;"origin-x;"origin_x;	@
;
i=o;	;"origin-y;"origin_y;	@
;
i=o;	;"origin-z;"origin_z;	@
;
i=o;	;"only3d;"only3d;	@
;
i=;"create-transform;	@
;
i;&T;#[[o;;"perspective;"perspective;	{ o;*;	@ê;F;
i[o;;"scale-x;"scale_x;	@êo;*;	@ê;F;
i[o;;"scale-y;"scale_y;	@êo;*;	@ê;F;
i[o;;"scale-z;"scale_z;	@êo;*;	@ê;F;
i[o;;"rotate-x;"rotate_x;	@êo;*;	@ê;F;
i[o;;"rotate-y;"rotate_y;	@êo;*;	@ê;F;
i[o;;"rotate-z;"rotate_z;	@êo;*;	@ê;F;
i	[o;;"rotate3d;"rotate3d;	@êo;*;	@ê;F;
i
[o;;"trans-x;"trans_x;	@êo;*;	@ê;F;
i[o;;"trans-y;"trans_y;	@êo;*;	@ê;F;
i[o;;"trans-z;"trans_z;	@êo;*;	@ê;F;
i[o;;"skew-x;"skew_x;	@êo;*;	@ê;F;
i[o;;"skew-y;"skew_y;	@êo;*;	@ê;F;
i[o;;"origin-x;"origin_x;	@êo;*;	@ê;F;
i[o;;"origin-y;"origin_y;	@êo;*;	@ê;F;
i[o;;"origin-z;"origin_z;	@êo;*;	@ê;F;
i[o;;"only3d;"only3d;	@êo;*;	@ê;F;
io;;[ ;[ ;	@
;0;"q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;
iA;i o;;[o;+;[ ;"create-transform;	@
;"{ ;
iU;#[o;*;	@
;F;
iNo;	;"
scale;"
scale;	@
;
iOo;	;"
scale;"
scale;	@
;
iOo;*;	@
;F;
iOo;*;	@
;F;
iPo;*;	@
;F;
iPo;	;"rotate;"rotate;	@
;
iPo;*;	@
;F;
iPo;	;"trans-x;"trans_x;	@
;
iQo;	;"trans-y;"trans_y;	@
;
iQo;*;	@
;F;
iQo;	;"skew-x;"skew_x;	@
;
iRo;	;"skew-y;"skew_y;	@
;
iRo;	;"origin-x;"origin_x;	@
;
iSo;	;"origin-y;"origin_y;	@
;
iSo;*;	@
;F;
iSo;*;	@
;F;
iT;"simple-transform;	@
;
iL;&T;#[[o;;"
scale;"
scale;	{ o;*;	@p;F;
iD[o;;"rotate;"rotate;	@po;*;	@p;F;
iE[o;;"trans-x;"trans_x;	@po;*;	@p;F;
iF[o;;"trans-y;"trans_y;	@po;*;	@p;F;
iG[o;;"skew-x;"skew_x;	@po;*;	@p;F;
iH[o;;"skew-y;"skew_y;	@po;*;	@p;F;
iI[o;;"origin-x;"origin_x;	@po;*;	@p;F;
iJ[o;;"origin-y;"origin_y;	@po;*;	@p;F;
iK;	@
;
i;&T